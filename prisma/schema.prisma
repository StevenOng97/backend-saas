// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  BUSINESS_OWNER
  STAFF
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
}

enum SmsStatus {
  QUEUED
  DELIVERED
  FAILED
}

enum SubscriptionPlan {
  FREE
  STARTER
  PRO
}

model Organization {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  users        User[]
  businesses   Business[]
  invites      Invite[]
  subscription Subscription?

  @@map("organizations")
}

model Business {
  id                       String   @id @default(uuid())
  name                     String
  email                    String?
  phone                    String?
  googleBusinessReviewLink String?  @map("google_business_review_link")
  organizationId           String   @map("organization_id")
  isMainLocation           Boolean  @default(false) @map("is_main_location")
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @default(now()) @map("updated_at")

  senderType    String  @default("shared") @map("sender_type")
  senderPhone   String? @map("sender_phone")
  a2pBrandId    String? @map("a2p_brand_id")
  a2pCampaignId String? @map("a2p_campaign_id")
  smsTemplate   String? @map("sms_template")
  emailTemplate String? @map("email_template")

  organization Organization @relation(fields: [organizationId], references: [id])
  customers    Customer[]
  invites      Invite[]
  smsLogs      SmsLog[]

  @@unique([organizationId, email])
  @@map("businesses")
}

model User {
  id                String          @id @default(uuid())
  authId            String?         @unique @map("auth_id")
  email             String          @unique
  password          String?
  firstName         String?         @map("first_name")
  lastName          String?         @map("last_name")
  role              UserRole        @default(ADMIN)
  googleId          String?         @unique @map("google_id")
  verificationToken String?         @map("verification_token")
  passwordResets    PasswordReset[]
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @default(now()) @map("updated_at")

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  @@map("users")
}

model PasswordReset {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  @@map("password_resets")
}

model Customer {
  id          String   @id @default(uuid())
  businessId  String   @map("business_id")
  name        String?
  email       String?
  phone       String?
  isReturning Boolean  @default(false) @map("is_returning")
  notes       String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  invites  Invite[]
  smsLogs  SmsLog[]
  optedOut Boolean  @default(false) @map("opted_out")

  @@unique([businessId, email])
  @@map("customers")
}

model Invite {
  id             String       @id @default(uuid())
  businessId     String       @map("business_id")
  organizationId String       @map("organization_id")
  customerId     String?      @map("customer_id")
  status         InviteStatus @default(PENDING)
  token          String       @unique
  createdAt      DateTime     @default(now()) @map("created_at")
  expiresAt      DateTime     @map("expires_at")
  metadata       Json         @default("{}")

  business     Business     @relation(fields: [businessId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])
  customer     Customer?    @relation(fields: [customerId], references: [id])
  smsLogs      SmsLog[]

  openedAt    DateTime? @map("opened_at")
  ratingValue Int?      @map("rating_value")
  deviceInfo  String?   @map("device_info")
  ipAddress   String?   @map("ip_address")
  feedback    Feedback?

  @@map("invites")
}

model Feedback {
  id        String   @id @default(uuid())
  inviteId  String   @unique @map("invite_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  invite Invite @relation(fields: [inviteId], references: [id])

  @@map("feedback")
}

model Subscription {
  id                   String           @id @default(uuid())
  organizationId       String           @unique @map("organization_id")
  plan                 SubscriptionPlan @default(FREE)
  stripeSubscriptionId String?          @map("stripe_subscription_id")
  currentPeriodStart   DateTime?        @map("current_period_start")
  currentPeriodEnd     DateTime?        @map("current_period_end")
  status               String
  usageLimits          Json             @default("{}") @map("usage_limits")
  inviteLimit          Int              @map("invite_limit")
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime         @default(now()) @map("updated_at")

  organization Organization @relation(fields: [organizationId], references: [id])

  @@map("subscriptions")
}

model SmsLog {
  id         String    @id @default(uuid())
  businessId String    @map("business_id")
  customerId String    @map("customer_id")
  inviteId   String?   @map("invite_id")
  twilioSid  String?   @map("twilio_sid")
  status     SmsStatus @default(QUEUED)
  message    String?
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @map("updated_at")

  business Business @relation(fields: [businessId], references: [id])
  customer Customer @relation(fields: [customerId], references: [id])
  invite   Invite?  @relation(fields: [inviteId], references: [id])

  @@map("sms_logs")
}

model UrlMapping {
  id          String   @id @default(uuid())
  originalUrl String   @map("original_url")
  shortUrl    String   @map("short_url")
  urlId       String   @unique @map("url_id")
  createdAt   DateTime @default(now()) @map("created_at")
  clicks      Int      @default(0)

  @@index([urlId])
  @@map("url_mappings")
}
